[["chapter2.html", "Chapter 2 Primer Efficiency Measurement 2.1 Data Simulation 2.2 Data Analysis", " Chapter 2 Primer Efficiency Measurement 2.1 Data Simulation With 1 target gene &amp; 1 housekeeping gene for simplicity We are going to dilute our sample three times by the factor of 1/10. So, for example, if we add 1\\(\\mu L\\) sample in 9\\(\\mu L\\) water, it will be a 1/10 dilution. We have to follow the same procedure serially (serial dilution) to make 1/100 and 1/1000 dilutions. Also, we shouldn’t forget to replicate the same dilution multiple times. Here, in this example, we are simulating 3 runs per dilution for 3 primer pairs against the same gene B1 to find out the best primer pairs. We are having one housekeeping gene (Hk) here. Add negative control (NTC) in the PCR plate as an internal control as well. set.seed(10) #just for reproducibility nDil &lt;- 3 #No. of dilution geneB1_1 &lt;- rbind(rnorm(nDil, 15.2, .03), rnorm(nDil, 18.4, .03), rnorm(nDil, 21.5, .03)) geneB1_1 ## [,1] [,2] [,3] ## [1,] 15.20056 15.19447 15.15886 ## [2,] 18.38202 18.40884 18.41169 ## [3,] 21.46376 21.48909 21.45120 geneB1_2 &lt;- rbind(rnorm(nDil, 15.3, .03), rnorm(nDil, 18.5, .03), rnorm(nDil, 21.8, .03)) geneB1_2 ## [,1] [,2] [,3] ## [1,] 15.29231 15.33305 15.32267 ## [2,] 18.49285 18.52962 18.52224 ## [3,] 21.80268 21.77135 21.79415 geneB1_3 &lt;- rbind(rnorm(nDil, 15.9, .03), rnorm(nDil, 19.1, .03), rnorm(nDil, 22.3, .03)) geneB1_3 ## [,1] [,2] [,3] ## [1,] 15.92777 15.91449 15.88211 ## [2,] 19.03444 19.07975 19.03643 ## [3,] 22.26204 22.28879 22.27937 geneHk &lt;- rbind(rnorm(nDil, 16.7, .03), rnorm(nDil, 19.9, .03), rnorm(nDil, 23.2, .03)) geneHk ## [,1] [,2] [,3] ## [1,] 16.67384 16.69695 16.69239 ## [2,] 19.84439 19.89766 19.92906 ## [3,] 23.20555 23.15860 23.15693 geneB1 &lt;- data.frame(rbind(geneB1_1, geneB1_2, geneB1_3, geneHk)) colnames(geneB1) &lt;- c(paste0(&quot;run&quot;, seq(1:3))) geneB1$mean_Ct &lt;- apply(geneB1, 1, mean) geneB1$dilution &lt;- rep(c(&quot;1/10&quot;, &quot;1/100&quot;, &quot;1/1000&quot;), times= 4) geneB1$primer &lt;- c(rep(&quot;B1_1&quot;, times = 3), rep(&quot;B1_2&quot;, times = 3), rep(&quot;B1_3&quot;, times = 3), rep(&quot;Hk&quot;, times = 3)) ## run1 run2 run3 mean_Ct dilution primer ## 1 15.20056 15.19447 15.15886 15.18463 1/10 B1_1 ## 2 18.38202 18.40884 18.41169 18.40085 1/100 B1_1 ## 3 21.46376 21.48909 21.45120 21.46802 1/1000 B1_1 ## 4 15.29231 15.33305 15.32267 15.31601 1/10 B1_2 ## 5 18.49285 18.52962 18.52224 18.51491 1/100 B1_2 ## 6 21.80268 21.77135 21.79415 21.78939 1/1000 B1_2 ## 7 15.92777 15.91449 15.88211 15.90812 1/10 B1_3 ## 8 19.03444 19.07975 19.03643 19.05021 1/100 B1_3 ## 9 22.26204 22.28879 22.27937 22.27674 1/1000 B1_3 ## 10 16.67384 16.69695 16.69239 16.68772 1/10 Hk ## 11 19.84439 19.89766 19.92906 19.89037 1/100 Hk ## 12 23.20555 23.15860 23.15693 23.17369 1/1000 Hk Data simulation is done (you will get this kind of data from RT-qPCR machine automatically). Let’s make sense from the data. 2.2 Data Analysis The line plot for each primer pairs: knitr::opts_chunk$set(fig.path = &#39;docs/figure/&#39;) library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.4 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(dplyr) geneB1 %&gt;% ggplot(aes(x=dilution, y = mean_Ct, group=primer, color=primer)) + geom_line() Figure 2.1: Line plot for all the primers. Now, we need to know the slope for each primer. %&gt;% function from dplyr package and lm() function will help us to find the slopes for every primer. coefficients[2] part of the code will give us the slopes which we will add to our dataset as a column. geneB1 &lt;- geneB1 %&gt;% group_by(primer) %&gt;% mutate(slope = round(lm(mean_Ct ~ dilution)$coefficients[2], 3)) geneB1 ## # A tibble: 12 × 7 ## # Groups: primer [4] ## run1 run2 run3 mean_Ct dilution primer slope ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 15.2 15.2 15.2 15.2 1/10 B1_1 3.22 ## 2 18.4 18.4 18.4 18.4 1/100 B1_1 3.22 ## 3 21.5 21.5 21.5 21.5 1/1000 B1_1 3.22 ## 4 15.3 15.3 15.3 15.3 1/10 B1_2 3.20 ## 5 18.5 18.5 18.5 18.5 1/100 B1_2 3.20 ## 6 21.8 21.8 21.8 21.8 1/1000 B1_2 3.20 ## 7 15.9 15.9 15.9 15.9 1/10 B1_3 3.14 ## 8 19.0 19.1 19.0 19.1 1/100 B1_3 3.14 ## 9 22.3 22.3 22.3 22.3 1/1000 B1_3 3.14 ## 10 16.7 16.7 16.7 16.7 1/10 Hk 3.20 ## 11 19.8 19.9 19.9 19.9 1/100 Hk 3.20 ## 12 23.2 23.2 23.2 23.2 1/1000 Hk 3.20 Now, let’s calculate the primer efficiency for each primer pairs. geneB1$efficiency &lt;- round((10^(1/geneB1$slope) - 1)*100, 2) geneB1 ## # A tibble: 12 × 8 ## # Groups: primer [4] ## run1 run2 run3 mean_Ct dilution primer slope efficiency ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 15.2 15.2 15.2 15.2 1/10 B1_1 3.22 105. ## 2 18.4 18.4 18.4 18.4 1/100 B1_1 3.22 105. ## 3 21.5 21.5 21.5 21.5 1/1000 B1_1 3.22 105. ## 4 15.3 15.3 15.3 15.3 1/10 B1_2 3.20 105. ## 5 18.5 18.5 18.5 18.5 1/100 B1_2 3.20 105. ## 6 21.8 21.8 21.8 21.8 1/1000 B1_2 3.20 105. ## 7 15.9 15.9 15.9 15.9 1/10 B1_3 3.14 108. ## 8 19.0 19.1 19.0 19.1 1/100 B1_3 3.14 108. ## 9 22.3 22.3 22.3 22.3 1/1000 B1_3 3.14 108. ## 10 16.7 16.7 16.7 16.7 1/10 Hk 3.20 105. ## 11 19.8 19.9 19.9 19.9 1/100 Hk 3.20 105. ## 12 23.2 23.2 23.2 23.2 1/1000 Hk 3.20 105. efficiencies &lt;- unique(geneB1$efficiency) names(efficiencies) &lt;- unique(geneB1$primer) efficiencies ## B1_1 B1_2 B1_3 Hk ## 104.62 105.40 108.10 105.21 We have primer efficiency in percentage now. It should be in the range of 90-110%. Here, in this case all the three primer pairs against geneB1 have good efficiency and all are very close to the efficiency of the primer pair for housekeeping gene (Hk). So, we can choose any. For your study, if you are going to design multiple primers for the same gene/transcript, you can check their efficiency and choose the best one in combination with the primer for housekeeping gene. We are going to choose geneB1_2 primer pair for our analysis which is closest to the primer efficiency for the housekeeping gene. Sometimes, your primer efficiency could be outside of the range of 90-110%. In that case you have to change concentration of forward and/or reverse primer keeping all other parameters constant. If your Ct values are too high, use less diluted sample. e.g. 1/2, 1/4, 1/8, ….., etc. You can put your sample directly without any dilution as well. If the Ct value for undiluted sample is bigger than the diluted one (it should be smaller because there is more starting/initial DNA sample), it will mean that there is something in the undiluted sample that is inhibiting the PCR amplification. What if your primer efficiencies for target and housekeeping gene are different and you can not change it? In this case, use pfaffl method for expression ratio calculation which can correct for the primer efficiency difference. To reduce primer dimer formation, you may have to– Adjust the annealing temperature, \\(T_m\\) (usually increasing \\(T_m\\) prevents primer-dimer formation) Reduce primer concentrations Adjust the forward and reverse primer ratios Redesign the primers if nothing works "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
