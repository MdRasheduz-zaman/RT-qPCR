[["index.html", "RT-qPCR Data Simulation and Analysis Chapter 1 Overview 1.1 How to use the book 1.2 About the experiment design 1.3 Render book 1.4 Preview book", " RT-qPCR Data Simulation and Analysis Md Rasheduzzaman 2022-08-08 Chapter 1 Overview This is an example of how to analyze RT-qPCR data. To have a real feelings of what the modelings do to RT-qPCR data, we are going to simulate RT-qPCR data first and then we will do the modeling and see what happens (we know what to expect from the modeling/analysis since we simulated the data and we know the characteristics of the data set). 1.1 How to use the book I would suggest starting from the beginning. You will know how to make the data set in R by simulating, how to apply the formula to know the fold-change or relative expression ratio, and how to apply plotting and modeling to interpret the properties of the samples/genes of interest. 1.2 About the experiment design To analyze any data set, we have to know the experiment design and then do the analysis accordingly. It may requires data cleaning/wrangling before the analysis as well. So, let’s learn about the experiment. This study was to know the mechanism of disease X in cattle. The causative reason is a missense mutation in gene A which causes a premature stop codon. Since rearing cattle for experimental studies is not a feasible option, a knock-out (KO) mouse line was created by inserting premature stop codon and the mouse line was validated by experimentation. So, we could compare this KO mouse line with the wild-type (WT) ones to know the underlying biological phenomena. But, there is a problem. We don’t have suitable commercial antibody available in the market against mouse A protein. But we need to have antibody to immunoprecipitate protein A to decipher the underlying biological mechanism. So, a 14-amino acid long V5-tag (GKPIPNPLLGLDST) was inserted just after the start codon of the gene A and a Tagged mouse line (TAG) is created to solve the problem of unavailabilty of antibodies. We have suitable commercial antibody against this V5-tag and studies show that V5-tag is well expressed, doesn’t get cleaved in the apoptotic cells and doesn’t hinder the activity of protein A. Also, microarray expression analysis shows that gene B is downregulated in the KO mice which is a vital protein related to the disease. This gene B has many known transcript variants in mice (let’s say 20) and we can categorize them in two broad categories depending on presence/absence of certain exons in the transcripts. Let’s say one group lack exon15 and the other group lack exon8. The fascinating fact is, as some studies claim, exon15-containing transcripts get translated preferentially at the early developmental stage and the exon8-containing transcripts get translated in the later developmental stage. So, age has its say in the expression pattern of the gene B. In accordance with the information above, we have designed primers against these exon15, exon8 and exon1. Exon1 is taken to know the approximate total expression of the gene B because it is common in both of the categories of the transcripts. We are going to compare the expression of exon15, exon8, and exon1 from the RT-qPCR study in this three mouse lines (at first for one gene of interest and one housekeeping gene, and then multiple (all 3) gene of interest and two housekeeping genes). Well, basically we are going to simulate the RT-qPCR data and then do the analysis to prove the claim from the previous studies. 1.3 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.4 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book,” or from the R console: bookdown::serve_book() "],["primer-efficiency-1-target-gene-1-housekeeping-gene.html", "Chapter 2 Primer efficiency (1 target gene &amp; 1 housekeeping gene) 2.1 Data simulation 2.2 Data analysis", " Chapter 2 Primer efficiency (1 target gene &amp; 1 housekeeping gene) 2.1 Data simulation We are going to dilute our sample three times by the factor of 1/10. So, for example, if we add 1\\(\\mu L\\) sample in 9\\(\\mu L\\) water, it will be a 1/10 dilution. We have to follow the same procedure serially (serial dilution) to make 1/100 and 1/1000 dilutions. Also, we shouldn’t forget to replicate the same dilution multiple times. Here, in this example, we are simulating 3 runs per dilution for 3 primer pairs against the same gene B1 to find out the best primer pairs. We are having one housekeeping gene (Hk) here. Add negative control (NTC) in the plate as an internal control as well. set.seed(10) #just for reproducibility nDil &lt;- 3 #No. of dilution geneB1_1 &lt;- rbind(rnorm(nDil, 15.2, .03), rnorm(nDil, 18.4, .03), rnorm(nDil, 21.5, .03)) geneB1_1 ## [,1] [,2] [,3] ## [1,] 15.20056 15.19447 15.15886 ## [2,] 18.38202 18.40884 18.41169 ## [3,] 21.46376 21.48909 21.45120 geneB1_2 &lt;- rbind(rnorm(nDil, 15.3, .03), rnorm(nDil, 18.5, .03), rnorm(nDil, 21.8, .03)) geneB1_2 ## [,1] [,2] [,3] ## [1,] 15.29231 15.33305 15.32267 ## [2,] 18.49285 18.52962 18.52224 ## [3,] 21.80268 21.77135 21.79415 geneB1_3 &lt;- rbind(rnorm(nDil, 15.9, .03), rnorm(nDil, 19.1, .03), rnorm(nDil, 22.3, .03)) geneB1_3 ## [,1] [,2] [,3] ## [1,] 15.92777 15.91449 15.88211 ## [2,] 19.03444 19.07975 19.03643 ## [3,] 22.26204 22.28879 22.27937 geneHk &lt;- rbind(rnorm(nDil, 16.7, .03), rnorm(nDil, 19.9, .03), rnorm(nDil, 23.2, .03)) geneHk ## [,1] [,2] [,3] ## [1,] 16.67384 16.69695 16.69239 ## [2,] 19.84439 19.89766 19.92906 ## [3,] 23.20555 23.15860 23.15693 geneB1 &lt;- data.frame(rbind(geneB1_1, geneB1_2, geneB1_3, geneHk)) colnames(geneB1) &lt;- c(paste0(&quot;run&quot;, seq(1:3))) geneB1$mean_Ct &lt;- apply(geneB1, 1, mean) geneB1$dilution &lt;- rep(c(&quot;1/10&quot;, &quot;1/100&quot;, &quot;1/1000&quot;), times= 4) geneB1$primer &lt;- c(rep(&quot;B1_1&quot;, times = 3), rep(&quot;B1_2&quot;, times = 3), rep(&quot;B1_3&quot;, times = 3), rep(&quot;Hk&quot;, times = 3)) ## run1 run2 run3 mean_Ct dilution ## 1 15.20056 15.19447 15.15886 15.18463 1/10 ## 2 18.38202 18.40884 18.41169 18.40085 1/100 ## 3 21.46376 21.48909 21.45120 21.46802 1/1000 ## 4 15.29231 15.33305 15.32267 15.31601 1/10 ## 5 18.49285 18.52962 18.52224 18.51491 1/100 ## 6 21.80268 21.77135 21.79415 21.78939 1/1000 ## 7 15.92777 15.91449 15.88211 15.90812 1/10 ## 8 19.03444 19.07975 19.03643 19.05021 1/100 ## 9 22.26204 22.28879 22.27937 22.27674 1/1000 ## 10 16.67384 16.69695 16.69239 16.68772 1/10 ## 11 19.84439 19.89766 19.92906 19.89037 1/100 ## 12 23.20555 23.15860 23.15693 23.17369 1/1000 ## primer ## 1 B1_1 ## 2 B1_1 ## 3 B1_1 ## 4 B1_2 ## 5 B1_2 ## 6 B1_2 ## 7 B1_3 ## 8 B1_3 ## 9 B1_3 ## 10 Hk ## 11 Hk ## 12 Hk Data simulation is done (you will get this kind of data from RT-qPCR machine automatically). Let’s make sense from the data. 2.2 Data analysis The line plot for each primer pairs: library(tidyverse) library(dplyr) geneB1 %&gt;% ggplot(aes(x=dilution, y = mean_Ct, group=primer, color=primer)) + geom_line() Figure 2.1: Line plot for all the primers. Now, we need to know the slope for each primer. %&gt;% function from dplyr package and lm() function will help us to find the slopes for every primer. coefficients[2] part of the code will give us the slopes which we will add to our dataset as a column. geneB1 &lt;- geneB1 %&gt;% group_by(primer) %&gt;% mutate(slope = round(lm(mean_Ct ~ dilution)$coefficients[2], 3)) geneB1 ## # A tibble: 12 × 7 ## # Groups: primer [4] ## run1 run2 run3 mean_Ct dilution primer slope ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 15.2 15.2 15.2 15.2 1/10 B1_1 3.22 ## 2 18.4 18.4 18.4 18.4 1/100 B1_1 3.22 ## 3 21.5 21.5 21.5 21.5 1/1000 B1_1 3.22 ## 4 15.3 15.3 15.3 15.3 1/10 B1_2 3.20 ## 5 18.5 18.5 18.5 18.5 1/100 B1_2 3.20 ## 6 21.8 21.8 21.8 21.8 1/1000 B1_2 3.20 ## 7 15.9 15.9 15.9 15.9 1/10 B1_3 3.14 ## 8 19.0 19.1 19.0 19.1 1/100 B1_3 3.14 ## 9 22.3 22.3 22.3 22.3 1/1000 B1_3 3.14 ## 10 16.7 16.7 16.7 16.7 1/10 Hk 3.20 ## 11 19.8 19.9 19.9 19.9 1/100 Hk 3.20 ## 12 23.2 23.2 23.2 23.2 1/1000 Hk 3.20 Now, let’s calculate the primer efficiency for each primer pairs. geneB1$efficiency &lt;- round((10^(1/geneB1$slope) - 1)*100, 2) geneB1 ## # A tibble: 12 × 8 ## # Groups: primer [4] ## run1 run2 run3 mean_Ct dilution primer slope ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 15.2 15.2 15.2 15.2 1/10 B1_1 3.22 ## 2 18.4 18.4 18.4 18.4 1/100 B1_1 3.22 ## 3 21.5 21.5 21.5 21.5 1/1000 B1_1 3.22 ## 4 15.3 15.3 15.3 15.3 1/10 B1_2 3.20 ## 5 18.5 18.5 18.5 18.5 1/100 B1_2 3.20 ## 6 21.8 21.8 21.8 21.8 1/1000 B1_2 3.20 ## 7 15.9 15.9 15.9 15.9 1/10 B1_3 3.14 ## 8 19.0 19.1 19.0 19.1 1/100 B1_3 3.14 ## 9 22.3 22.3 22.3 22.3 1/1000 B1_3 3.14 ## 10 16.7 16.7 16.7 16.7 1/10 Hk 3.20 ## 11 19.8 19.9 19.9 19.9 1/100 Hk 3.20 ## 12 23.2 23.2 23.2 23.2 1/1000 Hk 3.20 ## # … with 1 more variable: efficiency &lt;dbl&gt; efficiencies &lt;- unique(geneB1$efficiency) names(efficiencies) &lt;- unique(geneB1$primer) efficiencies ## B1_1 B1_2 B1_3 Hk ## 104.62 105.40 108.10 105.21 We have primer efficiency in percentage now. It should be in the range of 90-110%. Here, in this case all the three primer pairs against geneB1 have good efficiency and all are very close to the efficiency of the primer pair for housekeeping gene (Hk). So, we can choose any. For your study, if you are going to design multiple primers for the same gene/transcript, you can check their efficiency and choose the best one in combination with the primer for housekeeping gene. We are going to choose geneB1_2 primer pair for our analysis which is closest to the primer efficiency for the housekeeping gene. Sometimes, your primer efficiency could be outside of the range of 90-110%. In that case you have to change concentration of forward and/or reverse primer keeping all other parameters constant. If your Ct values are too high, use less diluted sample. e.g. 1/2, 1/4, 1/8, ….., etc. You can put your sample directly without any dilution as well. If the Ct value for undiluted sample is bigger than the diluted one (it should be smaller because there is more starting/initial DNA sample), it will mean that there is something in the undiluted sample that is inhibiting the PCR amplification. What if your primer efficiencies for target and housekeeping gene are different and you can not change it? In this case, use pfaffl method for expression ratio calculation which can correct for the primer efficiency difference. To reduce primer dimer formation, you may have to– Adjust the annealing temperature, \\(T_m\\) (usually increasing \\(T_m\\) prevents primer-dimer formation) Reduce primer concentrations Adjust the forward and reverse primer ratios Redesign the primers if nothing works "],["chapter1.html", "Chapter 3 Making/Simulating the simple data set 3.1 Samples of different age 3.2 Data preparation 3.3 Statistical analysis", " Chapter 3 Making/Simulating the simple data set Only for exon1 (B1) and one housekeeping gene (Hk) So, we are using primer pair geneB1_2 with primer pair Hk for the RT-qPCR. Let’s call the libraries required and make a simplistic data set to understand how the simulated Ct values are created. What is Ct value? Ans: the PCR cycle in which the amplification signal (because of fluorophore) of a gene/transcript reach a detectable amount. It depends on initial (or starting) amount (or concentration) of a particular gene/transcript. So, the more the starting concentration, earlier it get detected. So, highly abundant gene/transcript will have smaller Ct value compared to other transcripts. For example, let’s take two known transcripts: transcript A, and transcript B and their starting concentrations were 100µL and 80µL, respectively. Transcript A will have smaller Ct value compared to transcript B. library(purrr) library(tibble) set.seed(10) df &lt;- data.frame(replicate(n = 3, rnorm(5, 12, .1), simplify = TRUE)) df ## X1 X2 X3 ## 1 12.00187 12.03898 12.11018 ## 2 11.98157 11.87919 12.07558 ## 3 11.86287 11.96363 11.97618 ## 4 11.94008 11.83733 12.09874 ## 5 12.02945 11.97435 12.07414 The code above is an example code making the data set with Ct values for 3 replicates (in 3 columns) of the same samples for an exon. We are having total 5 samples (in 5 rows) here. data.frame() function makes the array of values into a data frame. I hope you understand how the code is working. Now, let’s do a real simulation. 3.1 Samples of different age We will have samples of three age groups, namely 15 days, 1 month and 3 months old. In each age group, there will be three genotypes/lines, namely knock-out (KO), tagged (TAG), and wild-type (WT). So, let’s add 5 samples per age group. 3.1.1 For age 15 days nKO &lt;- 5 #No. of KO sample nTAG &lt;- 5 # No. of TAG sample nWT &lt;- 5 # No. of WT sample set.seed(11) geneB1 &lt;- rbind(replicate(n = 3, rnorm(nKO, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(nTAG, 22, .08), simplify = TRUE), replicate(n = 3, rnorm(nWT, 22, .08), simplify = TRUE)) geneB1 ## [,1] [,2] [,3] ## [1,] 24.94090 24.90658 24.91716 ## [2,] 25.00266 25.13236 24.96516 ## [3,] 24.84834 25.06249 24.84617 ## [4,] 24.86373 24.99543 24.97444 ## [5,] 25.11785 24.89959 24.88501 ## [6,] 22.00099 21.94540 22.00057 ## [7,] 21.98216 21.99873 21.98499 ## [8,] 22.07102 21.96459 21.93874 ## [9,] 21.95263 22.02820 21.98232 ## [10,] 21.94754 22.00585 21.92131 ## [11,] 21.91166 22.03877 21.86908 ## [12,] 21.92495 21.98512 22.00163 ## [13,] 22.05429 22.12364 22.07134 ## [14,] 21.87380 21.95109 21.93018 ## [15,] 21.93040 21.97218 22.07120 Have a look at geneB1 data set. The data set has 3 Ct values in 3 columns for the same sample. Now, let’s make another data set for the housekeeping gene. Hk &lt;- rbind(replicate(n = 3, rnorm(nKO, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(nTAG, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(nWT, 25, .1), simplify = TRUE)) #making the dataset with Ct values Hk ## [,1] [,2] [,3] ## [1,] 24.96561 25.07899 25.05426 ## [2,] 24.78132 24.97700 24.98434 ## [3,] 25.08801 24.91815 25.04388 ## [4,] 25.07239 25.04997 25.14879 ## [5,] 25.02199 25.01592 25.00602 ## [6,] 24.91510 25.16935 25.04535 ## [7,] 25.23397 24.92090 24.98766 ## [8,] 24.98788 24.89247 24.92369 ## [9,] 24.80498 24.93921 25.02283 ## [10,] 25.05387 25.07544 25.11195 ## [11,] 25.01566 24.99352 24.93968 ## [12,] 24.93112 25.03155 24.87021 ## [13,] 25.04529 24.93943 25.05065 ## [14,] 24.89325 24.90924 24.91467 ## [15,] 25.04016 25.22616 24.84940 day15 &lt;- data.frame(geneB1, Hk) colnames(day15) &lt;- c(paste0(&quot;geneB1_run&quot;, seq(1:3)), paste0(&quot;Hk_run&quot;, seq(1:3))) #naming the columns. 3 runs day15$sampleID &lt;- c(paste0(&quot;KO&quot;, seq(1, nKO)), paste0(&quot;TAG&quot;, seq(1, nTAG)), paste0(&quot;WT&quot;, seq(1, nWT))) #naming sample/ID day15 &lt;- day15[, c(ncol(day15), 1:c(ncol(day15)-1))] #reordering day15$age &lt;- rep(&quot;15days&quot;, times = nrow(day15)) #adding age to all. nrow means how many sample day15$line &lt;- c(rep(&quot;KO&quot;, times = nKO), rep(&quot;TAG&quot;, times = nTAG), rep(&quot;WT&quot;, times = nWT)) day15 ## sampleID geneB1_run1 geneB1_run2 geneB1_run3 ## 1 KO1 24.94090 24.90658 24.91716 ## 2 KO2 25.00266 25.13236 24.96516 ## 3 KO3 24.84834 25.06249 24.84617 ## 4 KO4 24.86373 24.99543 24.97444 ## 5 KO5 25.11785 24.89959 24.88501 ## 6 TAG1 22.00099 21.94540 22.00057 ## 7 TAG2 21.98216 21.99873 21.98499 ## 8 TAG3 22.07102 21.96459 21.93874 ## 9 TAG4 21.95263 22.02820 21.98232 ## 10 TAG5 21.94754 22.00585 21.92131 ## 11 WT1 21.91166 22.03877 21.86908 ## 12 WT2 21.92495 21.98512 22.00163 ## 13 WT3 22.05429 22.12364 22.07134 ## 14 WT4 21.87380 21.95109 21.93018 ## 15 WT5 21.93040 21.97218 22.07120 ## Hk_run1 Hk_run2 Hk_run3 age line ## 1 24.96561 25.07899 25.05426 15days KO ## 2 24.78132 24.97700 24.98434 15days KO ## 3 25.08801 24.91815 25.04388 15days KO ## 4 25.07239 25.04997 25.14879 15days KO ## 5 25.02199 25.01592 25.00602 15days KO ## 6 24.91510 25.16935 25.04535 15days TAG ## 7 25.23397 24.92090 24.98766 15days TAG ## 8 24.98788 24.89247 24.92369 15days TAG ## 9 24.80498 24.93921 25.02283 15days TAG ## 10 25.05387 25.07544 25.11195 15days TAG ## 11 25.01566 24.99352 24.93968 15days WT ## 12 24.93112 25.03155 24.87021 15days WT ## 13 25.04529 24.93943 25.05065 15days WT ## 14 24.89325 24.90924 24.91467 15days WT ## 15 25.04016 25.22616 24.84940 15days WT 3.1.2 For age 1 month geneB1_1 &lt;- rbind(replicate(n = 3, rnorm(nKO, 20, .1), simplify = TRUE), replicate(n = 3, rnorm(nTAG, 17, .07), simplify = TRUE), replicate(n = 3, rnorm(nWT, 17, .07), simplify = TRUE)) geneB1_1 ## [,1] [,2] [,3] ## [1,] 20.12023 19.96474 19.95583 ## [2,] 19.89721 20.13265 20.02436 ## [3,] 20.09383 19.88598 20.05968 ## [4,] 19.94568 20.14131 19.98800 ## [5,] 20.05131 19.93978 19.79303 ## [6,] 17.04099 17.05897 16.96339 ## [7,] 17.03426 17.11344 16.97077 ## [8,] 16.92954 17.03134 17.02134 ## [9,] 17.08888 16.83908 16.99780 ## [10,] 17.07867 16.99446 17.00736 ## [11,] 17.17238 17.09879 16.99030 ## [12,] 16.95520 17.09022 16.91634 ## [13,] 17.08480 17.04098 17.02306 ## [14,] 17.04978 17.08953 16.92423 ## [15,] 16.98582 16.93883 16.96379 Hk1 &lt;- rbind(replicate(n = 3, rnorm(nKO, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(nTAG, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(nWT, 25, .1), simplify = TRUE)) Hk1 ## [,1] [,2] [,3] ## [1,] 24.99218 24.84439 25.02586 ## [2,] 24.96507 25.05442 25.03890 ## [3,] 24.77417 24.84615 25.20155 ## [4,] 24.97135 24.97075 24.96763 ## [5,] 25.02806 24.98888 25.03787 ## [6,] 24.84041 25.08417 25.00060 ## [7,] 25.06711 25.16976 24.94340 ## [8,] 25.04257 25.15864 25.05853 ## [9,] 25.06896 24.92336 25.01066 ## [10,] 24.90093 24.97181 24.86917 ## [11,] 24.99023 25.05158 25.10625 ## [12,] 24.85813 25.03324 24.90093 ## [13,] 24.97471 25.09431 25.11496 ## [14,] 25.00311 25.03116 25.08819 ## [15,] 24.99650 24.89106 25.11620 month1 &lt;- data.frame(geneB1_1, Hk1) colnames(month1) &lt;- c(paste0(&quot;geneB1_run&quot;, seq(1:3)), paste0(&quot;Hk_run&quot;, seq(1:3))) month1$sampleID &lt;- c(paste0(&quot;KO&quot;, seq(nKO+1, 2*nKO)), paste0(&quot;TAG&quot;, seq(nTAG+1, 2*nTAG)), paste0(&quot;WT&quot;, seq(nWT+1, 2*nWT))) month1 &lt;- month1[, c(ncol(month1), 1:ncol(month1)-1)] month1$age &lt;- rep(&quot;1month&quot;, times = nrow(month1)) month1$line &lt;- c(rep(&quot;KO&quot;, times = nKO), rep(&quot;TAG&quot;, times = nTAG), rep(&quot;WT&quot;, times = nWT)) month1 ## sampleID geneB1_run1 geneB1_run2 geneB1_run3 ## 1 KO6 20.12023 19.96474 19.95583 ## 2 KO7 19.89721 20.13265 20.02436 ## 3 KO8 20.09383 19.88598 20.05968 ## 4 KO9 19.94568 20.14131 19.98800 ## 5 KO10 20.05131 19.93978 19.79303 ## 6 TAG6 17.04099 17.05897 16.96339 ## 7 TAG7 17.03426 17.11344 16.97077 ## 8 TAG8 16.92954 17.03134 17.02134 ## 9 TAG9 17.08888 16.83908 16.99780 ## 10 TAG10 17.07867 16.99446 17.00736 ## 11 WT6 17.17238 17.09879 16.99030 ## 12 WT7 16.95520 17.09022 16.91634 ## 13 WT8 17.08480 17.04098 17.02306 ## 14 WT9 17.04978 17.08953 16.92423 ## 15 WT10 16.98582 16.93883 16.96379 ## Hk_run1 Hk_run2 Hk_run3 age line ## 1 24.99218 24.84439 25.02586 1month KO ## 2 24.96507 25.05442 25.03890 1month KO ## 3 24.77417 24.84615 25.20155 1month KO ## 4 24.97135 24.97075 24.96763 1month KO ## 5 25.02806 24.98888 25.03787 1month KO ## 6 24.84041 25.08417 25.00060 1month TAG ## 7 25.06711 25.16976 24.94340 1month TAG ## 8 25.04257 25.15864 25.05853 1month TAG ## 9 25.06896 24.92336 25.01066 1month TAG ## 10 24.90093 24.97181 24.86917 1month TAG ## 11 24.99023 25.05158 25.10625 1month WT ## 12 24.85813 25.03324 24.90093 1month WT ## 13 24.97471 25.09431 25.11496 1month WT ## 14 25.00311 25.03116 25.08819 1month WT ## 15 24.99650 24.89106 25.11620 1month WT 3.1.3 For age 3 months geneB1_2 &lt;- rbind(replicate(n = 3, rnorm(5, 14, .1), simplify = TRUE), replicate(n = 3, rnorm(5, 10, .07), simplify = TRUE), replicate(n = 3, rnorm(5, 10, .07), simplify = TRUE)) geneB1_2 ## [,1] [,2] [,3] ## [1,] 13.990248 13.973418 13.996977 ## [2,] 13.990677 13.961370 13.950218 ## [3,] 14.066960 13.984920 14.087149 ## [4,] 13.927526 13.948576 14.007427 ## [5,] 14.227612 14.034325 14.041510 ## [6,] 10.193997 10.046080 10.000612 ## [7,] 10.119996 10.115640 9.974697 ## [8,] 9.913608 9.912089 9.962928 ## [9,] 10.012200 10.061673 9.927000 ## [10,] 10.068825 10.051979 9.910855 ## [11,] 10.051243 9.966365 10.009551 ## [12,] 10.047408 9.946011 10.025618 ## [13,] 9.940849 10.065725 10.025647 ## [14,] 9.965121 9.928970 9.970545 ## [15,] 10.099612 9.989002 9.937030 Hk2 &lt;- rbind(replicate(n = 3, rnorm(5, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(5, 25, .1), simplify = TRUE), replicate(n = 3, rnorm(5, 25, .1), simplify = TRUE)) Hk2 ## [,1] [,2] [,3] ## [1,] 24.99747 25.09693 24.98493 ## [2,] 25.00248 25.00429 24.98668 ## [3,] 25.05610 24.79599 25.13754 ## [4,] 24.83611 25.02860 24.89823 ## [5,] 24.93741 24.81172 25.08094 ## [6,] 25.09569 24.86937 24.97613 ## [7,] 25.06381 24.99752 24.99742 ## [8,] 25.17920 25.04904 25.09002 ## [9,] 25.11718 24.83137 25.14293 ## [10,] 25.14401 24.91704 25.00594 ## [11,] 24.94511 25.03577 25.06313 ## [12,] 25.08182 24.77762 24.83033 ## [13,] 24.95545 24.98846 25.02273 ## [14,] 24.96395 24.87760 24.96898 ## [15,] 24.98405 24.88048 25.12245 month3 &lt;- data.frame(geneB1_2, Hk2) colnames(month3) &lt;- c(paste0(&quot;geneB1_run&quot;, seq(1:3)), paste0(&quot;Hk_run&quot;, seq(1:3))) month3$sampleID &lt;- c(paste0(&quot;KO&quot;, seq(2*nKO+1, 3*nKO)), paste0(&quot;TAG&quot;, seq(2*nTAG+1, 3*nTAG)), paste0(&quot;WT&quot;, seq(2*nWT+1, 3*nWT))) month3 &lt;- month3[, c(ncol(month3), 1:ncol(month3)-1)] month3$age &lt;- rep(&quot;3months&quot;, times = nrow(month3)) #adding age to all. nrow means how many sample month3$line &lt;- c(rep(&quot;KO&quot;, times = nKO), rep(&quot;TAG&quot;, times = nTAG), rep(&quot;WT&quot;, times = nWT)) month3 ## sampleID geneB1_run1 geneB1_run2 geneB1_run3 ## 1 KO11 13.990248 13.973418 13.996977 ## 2 KO12 13.990677 13.961370 13.950218 ## 3 KO13 14.066960 13.984920 14.087149 ## 4 KO14 13.927526 13.948576 14.007427 ## 5 KO15 14.227612 14.034325 14.041510 ## 6 TAG11 10.193997 10.046080 10.000612 ## 7 TAG12 10.119996 10.115640 9.974697 ## 8 TAG13 9.913608 9.912089 9.962928 ## 9 TAG14 10.012200 10.061673 9.927000 ## 10 TAG15 10.068825 10.051979 9.910855 ## 11 WT11 10.051243 9.966365 10.009551 ## 12 WT12 10.047408 9.946011 10.025618 ## 13 WT13 9.940849 10.065725 10.025647 ## 14 WT14 9.965121 9.928970 9.970545 ## 15 WT15 10.099612 9.989002 9.937030 ## Hk_run1 Hk_run2 Hk_run3 age line ## 1 24.99747 25.09693 24.98493 3months KO ## 2 25.00248 25.00429 24.98668 3months KO ## 3 25.05610 24.79599 25.13754 3months KO ## 4 24.83611 25.02860 24.89823 3months KO ## 5 24.93741 24.81172 25.08094 3months KO ## 6 25.09569 24.86937 24.97613 3months TAG ## 7 25.06381 24.99752 24.99742 3months TAG ## 8 25.17920 25.04904 25.09002 3months TAG ## 9 25.11718 24.83137 25.14293 3months TAG ## 10 25.14401 24.91704 25.00594 3months TAG ## 11 24.94511 25.03577 25.06313 3months WT ## 12 25.08182 24.77762 24.83033 3months WT ## 13 24.95545 24.98846 25.02273 3months WT ## 14 24.96395 24.87760 24.96898 3months WT ## 15 24.98405 24.88048 25.12245 3months WT 3.1.4 Making the whole data set combining all three datasets: by rbind() function pcr &lt;- rbind(day15, month1, month3) pcr ## sampleID geneB1_run1 geneB1_run2 geneB1_run3 ## 1 KO1 24.940897 24.906585 24.917157 ## 2 KO2 25.002659 25.132361 24.965165 ## 3 KO3 24.848345 25.062492 24.846171 ## 4 KO4 24.863735 24.995428 24.974443 ## 5 KO5 25.117849 24.899588 24.885005 ## 6 TAG1 22.000986 21.945399 22.000573 ## 7 TAG2 21.982162 21.998731 21.984992 ## 8 TAG3 22.071022 21.964592 21.938744 ## 9 TAG4 21.952628 22.028205 21.982315 ## 10 TAG5 21.947543 22.005854 21.921313 ## 11 WT1 21.911657 22.038774 21.869079 ## 12 WT2 21.924948 21.985116 22.001631 ## 13 WT3 22.054290 22.123644 22.071339 ## 14 WT4 21.873800 21.951090 21.930180 ## 15 WT5 21.930405 21.972179 22.071204 ## 16 KO6 20.120233 19.964741 19.955833 ## 17 KO7 19.897213 20.132653 20.024364 ## 18 KO8 20.093827 19.885985 20.059678 ## 19 KO9 19.945685 20.141311 19.987996 ## 20 KO10 20.051310 19.939782 19.793026 ## 21 TAG6 17.040994 17.058974 16.963385 ## 22 TAG7 17.034257 17.113443 16.970769 ## 23 TAG8 16.929538 17.031337 17.021341 ## 24 TAG9 17.088876 16.839077 16.997804 ## 25 TAG10 17.078674 16.994459 17.007359 ## 26 WT6 17.172377 17.098787 16.990298 ## 27 WT7 16.955201 17.090217 16.916336 ## 28 WT8 17.084797 17.040983 17.023059 ## 29 WT9 17.049781 17.089529 16.924230 ## 30 WT10 16.985817 16.938827 16.963788 ## 31 KO11 13.990248 13.973418 13.996977 ## 32 KO12 13.990677 13.961370 13.950218 ## 33 KO13 14.066960 13.984920 14.087149 ## 34 KO14 13.927526 13.948576 14.007427 ## 35 KO15 14.227612 14.034325 14.041510 ## 36 TAG11 10.193997 10.046080 10.000612 ## 37 TAG12 10.119996 10.115640 9.974697 ## 38 TAG13 9.913608 9.912089 9.962928 ## 39 TAG14 10.012200 10.061673 9.927000 ## 40 TAG15 10.068825 10.051979 9.910855 ## 41 WT11 10.051243 9.966365 10.009551 ## 42 WT12 10.047408 9.946011 10.025618 ## 43 WT13 9.940849 10.065725 10.025647 ## 44 WT14 9.965121 9.928970 9.970545 ## 45 WT15 10.099612 9.989002 9.937030 ## Hk_run1 Hk_run2 Hk_run3 age line ## 1 24.96561 25.07899 25.05426 15days KO ## 2 24.78132 24.97700 24.98434 15days KO ## 3 25.08801 24.91815 25.04388 15days KO ## 4 25.07239 25.04997 25.14879 15days KO ## 5 25.02199 25.01592 25.00602 15days KO ## 6 24.91510 25.16935 25.04535 15days TAG ## 7 25.23397 24.92090 24.98766 15days TAG ## 8 24.98788 24.89247 24.92369 15days TAG ## 9 24.80498 24.93921 25.02283 15days TAG ## 10 25.05387 25.07544 25.11195 15days TAG ## 11 25.01566 24.99352 24.93968 15days WT ## 12 24.93112 25.03155 24.87021 15days WT ## 13 25.04529 24.93943 25.05065 15days WT ## 14 24.89325 24.90924 24.91467 15days WT ## 15 25.04016 25.22616 24.84940 15days WT ## 16 24.99218 24.84439 25.02586 1month KO ## 17 24.96507 25.05442 25.03890 1month KO ## 18 24.77417 24.84615 25.20155 1month KO ## 19 24.97135 24.97075 24.96763 1month KO ## 20 25.02806 24.98888 25.03787 1month KO ## 21 24.84041 25.08417 25.00060 1month TAG ## 22 25.06711 25.16976 24.94340 1month TAG ## 23 25.04257 25.15864 25.05853 1month TAG ## 24 25.06896 24.92336 25.01066 1month TAG ## 25 24.90093 24.97181 24.86917 1month TAG ## 26 24.99023 25.05158 25.10625 1month WT ## 27 24.85813 25.03324 24.90093 1month WT ## 28 24.97471 25.09431 25.11496 1month WT ## 29 25.00311 25.03116 25.08819 1month WT ## 30 24.99650 24.89106 25.11620 1month WT ## 31 24.99747 25.09693 24.98493 3months KO ## 32 25.00248 25.00429 24.98668 3months KO ## 33 25.05610 24.79599 25.13754 3months KO ## 34 24.83611 25.02860 24.89823 3months KO ## 35 24.93741 24.81172 25.08094 3months KO ## 36 25.09569 24.86937 24.97613 3months TAG ## 37 25.06381 24.99752 24.99742 3months TAG ## 38 25.17920 25.04904 25.09002 3months TAG ## 39 25.11718 24.83137 25.14293 3months TAG ## 40 25.14401 24.91704 25.00594 3months TAG ## 41 24.94511 25.03577 25.06313 3months WT ## 42 25.08182 24.77762 24.83033 3months WT ## 43 24.95545 24.98846 25.02273 3months WT ## 44 24.96395 24.87760 24.96898 3months WT ## 45 24.98405 24.88048 25.12245 3months WT Our data simulation is done. 3.2 Data preparation Now, let’s select the numeric columns with Ct values only and find out the mean value for geneB1 and HK from the three runs (or replicates) per sample. a &lt;- pcr %&gt;% select_if(is.numeric) %&gt;% colnames() pcr$Ct_geneB1 &lt;- apply(pcr[, c(grep(&quot;geneB1_&quot;, a, ignore.case = TRUE, value = T))], 1, mean) pcr$Ct_Hk &lt;- apply(pcr[, c(grep(&quot;Hk_&quot;, a, ignore.case = TRUE, value = T))], 1, mean) pcr ## sampleID geneB1_run1 geneB1_run2 geneB1_run3 ## 1 KO1 24.940897 24.906585 24.917157 ## 2 KO2 25.002659 25.132361 24.965165 ## 3 KO3 24.848345 25.062492 24.846171 ## 4 KO4 24.863735 24.995428 24.974443 ## 5 KO5 25.117849 24.899588 24.885005 ## 6 TAG1 22.000986 21.945399 22.000573 ## 7 TAG2 21.982162 21.998731 21.984992 ## 8 TAG3 22.071022 21.964592 21.938744 ## 9 TAG4 21.952628 22.028205 21.982315 ## 10 TAG5 21.947543 22.005854 21.921313 ## 11 WT1 21.911657 22.038774 21.869079 ## 12 WT2 21.924948 21.985116 22.001631 ## 13 WT3 22.054290 22.123644 22.071339 ## 14 WT4 21.873800 21.951090 21.930180 ## 15 WT5 21.930405 21.972179 22.071204 ## 16 KO6 20.120233 19.964741 19.955833 ## 17 KO7 19.897213 20.132653 20.024364 ## 18 KO8 20.093827 19.885985 20.059678 ## 19 KO9 19.945685 20.141311 19.987996 ## 20 KO10 20.051310 19.939782 19.793026 ## 21 TAG6 17.040994 17.058974 16.963385 ## 22 TAG7 17.034257 17.113443 16.970769 ## 23 TAG8 16.929538 17.031337 17.021341 ## 24 TAG9 17.088876 16.839077 16.997804 ## 25 TAG10 17.078674 16.994459 17.007359 ## 26 WT6 17.172377 17.098787 16.990298 ## 27 WT7 16.955201 17.090217 16.916336 ## 28 WT8 17.084797 17.040983 17.023059 ## 29 WT9 17.049781 17.089529 16.924230 ## 30 WT10 16.985817 16.938827 16.963788 ## 31 KO11 13.990248 13.973418 13.996977 ## 32 KO12 13.990677 13.961370 13.950218 ## 33 KO13 14.066960 13.984920 14.087149 ## 34 KO14 13.927526 13.948576 14.007427 ## 35 KO15 14.227612 14.034325 14.041510 ## 36 TAG11 10.193997 10.046080 10.000612 ## 37 TAG12 10.119996 10.115640 9.974697 ## 38 TAG13 9.913608 9.912089 9.962928 ## 39 TAG14 10.012200 10.061673 9.927000 ## 40 TAG15 10.068825 10.051979 9.910855 ## 41 WT11 10.051243 9.966365 10.009551 ## 42 WT12 10.047408 9.946011 10.025618 ## 43 WT13 9.940849 10.065725 10.025647 ## 44 WT14 9.965121 9.928970 9.970545 ## 45 WT15 10.099612 9.989002 9.937030 ## Hk_run1 Hk_run2 Hk_run3 age line ## 1 24.96561 25.07899 25.05426 15days KO ## 2 24.78132 24.97700 24.98434 15days KO ## 3 25.08801 24.91815 25.04388 15days KO ## 4 25.07239 25.04997 25.14879 15days KO ## 5 25.02199 25.01592 25.00602 15days KO ## 6 24.91510 25.16935 25.04535 15days TAG ## 7 25.23397 24.92090 24.98766 15days TAG ## 8 24.98788 24.89247 24.92369 15days TAG ## 9 24.80498 24.93921 25.02283 15days TAG ## 10 25.05387 25.07544 25.11195 15days TAG ## 11 25.01566 24.99352 24.93968 15days WT ## 12 24.93112 25.03155 24.87021 15days WT ## 13 25.04529 24.93943 25.05065 15days WT ## 14 24.89325 24.90924 24.91467 15days WT ## 15 25.04016 25.22616 24.84940 15days WT ## 16 24.99218 24.84439 25.02586 1month KO ## 17 24.96507 25.05442 25.03890 1month KO ## 18 24.77417 24.84615 25.20155 1month KO ## 19 24.97135 24.97075 24.96763 1month KO ## 20 25.02806 24.98888 25.03787 1month KO ## 21 24.84041 25.08417 25.00060 1month TAG ## 22 25.06711 25.16976 24.94340 1month TAG ## 23 25.04257 25.15864 25.05853 1month TAG ## 24 25.06896 24.92336 25.01066 1month TAG ## 25 24.90093 24.97181 24.86917 1month TAG ## 26 24.99023 25.05158 25.10625 1month WT ## 27 24.85813 25.03324 24.90093 1month WT ## 28 24.97471 25.09431 25.11496 1month WT ## 29 25.00311 25.03116 25.08819 1month WT ## 30 24.99650 24.89106 25.11620 1month WT ## 31 24.99747 25.09693 24.98493 3months KO ## 32 25.00248 25.00429 24.98668 3months KO ## 33 25.05610 24.79599 25.13754 3months KO ## 34 24.83611 25.02860 24.89823 3months KO ## 35 24.93741 24.81172 25.08094 3months KO ## 36 25.09569 24.86937 24.97613 3months TAG ## 37 25.06381 24.99752 24.99742 3months TAG ## 38 25.17920 25.04904 25.09002 3months TAG ## 39 25.11718 24.83137 25.14293 3months TAG ## 40 25.14401 24.91704 25.00594 3months TAG ## 41 24.94511 25.03577 25.06313 3months WT ## 42 25.08182 24.77762 24.83033 3months WT ## 43 24.95545 24.98846 25.02273 3months WT ## 44 24.96395 24.87760 24.96898 3months WT ## 45 24.98405 24.88048 25.12245 3months WT ## Ct_geneB1 Ct_Hk ## 1 24.921546 25.03295 ## 2 25.033395 24.91422 ## 3 24.919002 25.01668 ## 4 24.944535 25.09038 ## 5 24.967481 25.01464 ## 6 21.982319 25.04327 ## 7 21.988629 25.04751 ## 8 21.991452 24.93468 ## 9 21.987716 24.92234 ## 10 21.958236 25.08042 ## 11 21.939837 24.98295 ## 12 21.970565 24.94430 ## 13 22.083091 25.01179 ## 14 21.918357 24.90572 ## 15 21.991263 25.03857 ## 16 20.013602 24.95414 ## 17 20.018077 25.01946 ## 18 20.013163 24.94062 ## 19 20.024997 24.96991 ## 20 19.928039 25.01827 ## 21 17.021118 24.97506 ## 22 17.039490 25.06009 ## 23 16.994072 25.08658 ## 24 16.975252 25.00099 ## 25 17.026830 24.91397 ## 26 17.087154 25.04936 ## 27 16.987251 24.93077 ## 28 17.049613 25.06133 ## 29 17.021180 25.04082 ## 30 16.962811 25.00125 ## 31 13.986881 25.02644 ## 32 13.967421 24.99782 ## 33 14.046343 24.99654 ## 34 13.961176 24.92098 ## 35 14.101149 24.94335 ## 36 10.080229 24.98040 ## 37 10.070111 25.01959 ## 38 9.929542 25.10609 ## 39 10.000291 25.03049 ## 40 10.010553 25.02233 ## 41 10.009053 25.01467 ## 42 10.006346 24.89659 ## 43 10.010740 24.98888 ## 44 9.954879 24.93684 ## 45 10.008548 24.99566 Let’s organize the data set. Also, we don’t need the raw Ct values from the three runs any more. data &lt;- pcr[, c(&quot;sampleID&quot;, &quot;age&quot;, &quot;line&quot;, &quot;Ct_geneB1&quot;, &quot;Ct_Hk&quot;)] data ## sampleID age line Ct_geneB1 Ct_Hk ## 1 KO1 15days KO 24.921546 25.03295 ## 2 KO2 15days KO 25.033395 24.91422 ## 3 KO3 15days KO 24.919002 25.01668 ## 4 KO4 15days KO 24.944535 25.09038 ## 5 KO5 15days KO 24.967481 25.01464 ## 6 TAG1 15days TAG 21.982319 25.04327 ## 7 TAG2 15days TAG 21.988629 25.04751 ## 8 TAG3 15days TAG 21.991452 24.93468 ## 9 TAG4 15days TAG 21.987716 24.92234 ## 10 TAG5 15days TAG 21.958236 25.08042 ## 11 WT1 15days WT 21.939837 24.98295 ## 12 WT2 15days WT 21.970565 24.94430 ## 13 WT3 15days WT 22.083091 25.01179 ## 14 WT4 15days WT 21.918357 24.90572 ## 15 WT5 15days WT 21.991263 25.03857 ## 16 KO6 1month KO 20.013602 24.95414 ## 17 KO7 1month KO 20.018077 25.01946 ## 18 KO8 1month KO 20.013163 24.94062 ## 19 KO9 1month KO 20.024997 24.96991 ## 20 KO10 1month KO 19.928039 25.01827 ## 21 TAG6 1month TAG 17.021118 24.97506 ## 22 TAG7 1month TAG 17.039490 25.06009 ## 23 TAG8 1month TAG 16.994072 25.08658 ## 24 TAG9 1month TAG 16.975252 25.00099 ## 25 TAG10 1month TAG 17.026830 24.91397 ## 26 WT6 1month WT 17.087154 25.04936 ## 27 WT7 1month WT 16.987251 24.93077 ## 28 WT8 1month WT 17.049613 25.06133 ## 29 WT9 1month WT 17.021180 25.04082 ## 30 WT10 1month WT 16.962811 25.00125 ## 31 KO11 3months KO 13.986881 25.02644 ## 32 KO12 3months KO 13.967421 24.99782 ## 33 KO13 3months KO 14.046343 24.99654 ## 34 KO14 3months KO 13.961176 24.92098 ## 35 KO15 3months KO 14.101149 24.94335 ## 36 TAG11 3months TAG 10.080229 24.98040 ## 37 TAG12 3months TAG 10.070111 25.01959 ## 38 TAG13 3months TAG 9.929542 25.10609 ## 39 TAG14 3months TAG 10.000291 25.03049 ## 40 TAG15 3months TAG 10.010553 25.02233 ## 41 WT11 3months WT 10.009053 25.01467 ## 42 WT12 3months WT 10.006346 24.89659 ## 43 WT13 3months WT 10.010740 24.98888 ## 44 WT14 3months WT 9.954879 24.93684 ## 45 WT15 3months WT 10.008548 24.99566 Let’s apply the formula of ΔCt: delta_Ct = Ct (gene of interest) – Ct (housekeeping gene) data$delta_Ct &lt;- data$Ct_geneB1 - data$Ct_Hk data ## sampleID age line Ct_geneB1 Ct_Hk ## 1 KO1 15days KO 24.921546 25.03295 ## 2 KO2 15days KO 25.033395 24.91422 ## 3 KO3 15days KO 24.919002 25.01668 ## 4 KO4 15days KO 24.944535 25.09038 ## 5 KO5 15days KO 24.967481 25.01464 ## 6 TAG1 15days TAG 21.982319 25.04327 ## 7 TAG2 15days TAG 21.988629 25.04751 ## 8 TAG3 15days TAG 21.991452 24.93468 ## 9 TAG4 15days TAG 21.987716 24.92234 ## 10 TAG5 15days TAG 21.958236 25.08042 ## 11 WT1 15days WT 21.939837 24.98295 ## 12 WT2 15days WT 21.970565 24.94430 ## 13 WT3 15days WT 22.083091 25.01179 ## 14 WT4 15days WT 21.918357 24.90572 ## 15 WT5 15days WT 21.991263 25.03857 ## 16 KO6 1month KO 20.013602 24.95414 ## 17 KO7 1month KO 20.018077 25.01946 ## 18 KO8 1month KO 20.013163 24.94062 ## 19 KO9 1month KO 20.024997 24.96991 ## 20 KO10 1month KO 19.928039 25.01827 ## 21 TAG6 1month TAG 17.021118 24.97506 ## 22 TAG7 1month TAG 17.039490 25.06009 ## 23 TAG8 1month TAG 16.994072 25.08658 ## 24 TAG9 1month TAG 16.975252 25.00099 ## 25 TAG10 1month TAG 17.026830 24.91397 ## 26 WT6 1month WT 17.087154 25.04936 ## 27 WT7 1month WT 16.987251 24.93077 ## 28 WT8 1month WT 17.049613 25.06133 ## 29 WT9 1month WT 17.021180 25.04082 ## 30 WT10 1month WT 16.962811 25.00125 ## 31 KO11 3months KO 13.986881 25.02644 ## 32 KO12 3months KO 13.967421 24.99782 ## 33 KO13 3months KO 14.046343 24.99654 ## 34 KO14 3months KO 13.961176 24.92098 ## 35 KO15 3months KO 14.101149 24.94335 ## 36 TAG11 3months TAG 10.080229 24.98040 ## 37 TAG12 3months TAG 10.070111 25.01959 ## 38 TAG13 3months TAG 9.929542 25.10609 ## 39 TAG14 3months TAG 10.000291 25.03049 ## 40 TAG15 3months TAG 10.010553 25.02233 ## 41 WT11 3months WT 10.009053 25.01467 ## 42 WT12 3months WT 10.006346 24.89659 ## 43 WT13 3months WT 10.010740 24.98888 ## 44 WT14 3months WT 9.954879 24.93684 ## 45 WT15 3months WT 10.008548 24.99566 ## delta_Ct ## 1 -0.11140794 ## 2 0.11917562 ## 3 -0.09767592 ## 4 -0.14584676 ## 5 -0.04715955 ## 6 -3.06094678 ## 7 -3.05888111 ## 8 -2.94322889 ## 9 -2.93462371 ## 10 -3.12218280 ## 11 -3.04311571 ## 12 -2.97373064 ## 13 -2.92869940 ## 14 -2.98736122 ## 15 -3.04730859 ## 16 -4.94054030 ## 17 -5.00138798 ## 18 -4.92746102 ## 19 -4.94491412 ## 20 -5.09022981 ## 21 -7.95394331 ## 22 -8.02060148 ## 23 -8.09250906 ## 24 -8.02573996 ## 25 -7.88713645 ## 26 -7.96220205 ## 27 -7.94351666 ## 28 -8.01171251 ## 29 -8.01964385 ## 30 -8.03844168 ## 31 -11.03956221 ## 32 -11.03039419 ## 33 -10.95019911 ## 34 -10.95980324 ## 35 -10.84220450 ## 36 -14.90016995 ## 37 -14.94947471 ## 38 -15.17654394 ## 39 -15.03020237 ## 40 -15.01177859 ## 41 -15.00561901 ## 42 -14.89024656 ## 43 -14.97814222 ## 44 -14.98196314 ## 45 -14.98711323 Let’s calculate the calibrator’s mean ΔCt value. Geometric mean is better if calibrators’ ΔCt values are variable. Geometric mean is resistant to outlier. Our Ct values are not so variable. So, we can do arithmetic mean. calibrator will be the samples relative to which we want to know the expression level. We want to know the fold-change (fold gene expression level) compared to 15-days-old wild-type samples (calibraators) here. We have to keep in mind this thing for our downstream analysis. calibrator &lt;- data[data$line == &quot;WT&quot; &amp; data$age == &quot;15days&quot;,] calibrator ## sampleID age line Ct_geneB1 Ct_Hk ## 11 WT1 15days WT 21.93984 24.98295 ## 12 WT2 15days WT 21.97056 24.94430 ## 13 WT3 15days WT 22.08309 25.01179 ## 14 WT4 15days WT 21.91836 24.90572 ## 15 WT5 15days WT 21.99126 25.03857 ## delta_Ct ## 11 -3.043116 ## 12 -2.973731 ## 13 -2.928699 ## 14 -2.987361 ## 15 -3.047309 calibrator_deltaCt &lt;- mean(calibrator$delta_Ct) Now, we have to subtract the calibrator ΔCt value from each sample to find out ΔΔCt value data$delta_deltaCt &lt;- data$delta_Ct - calibrator_deltaCt data ## sampleID age line Ct_geneB1 Ct_Hk ## 1 KO1 15days KO 24.921546 25.03295 ## 2 KO2 15days KO 25.033395 24.91422 ## 3 KO3 15days KO 24.919002 25.01668 ## 4 KO4 15days KO 24.944535 25.09038 ## 5 KO5 15days KO 24.967481 25.01464 ## 6 TAG1 15days TAG 21.982319 25.04327 ## 7 TAG2 15days TAG 21.988629 25.04751 ## 8 TAG3 15days TAG 21.991452 24.93468 ## 9 TAG4 15days TAG 21.987716 24.92234 ## 10 TAG5 15days TAG 21.958236 25.08042 ## 11 WT1 15days WT 21.939837 24.98295 ## 12 WT2 15days WT 21.970565 24.94430 ## 13 WT3 15days WT 22.083091 25.01179 ## 14 WT4 15days WT 21.918357 24.90572 ## 15 WT5 15days WT 21.991263 25.03857 ## 16 KO6 1month KO 20.013602 24.95414 ## 17 KO7 1month KO 20.018077 25.01946 ## 18 KO8 1month KO 20.013163 24.94062 ## 19 KO9 1month KO 20.024997 24.96991 ## 20 KO10 1month KO 19.928039 25.01827 ## 21 TAG6 1month TAG 17.021118 24.97506 ## 22 TAG7 1month TAG 17.039490 25.06009 ## 23 TAG8 1month TAG 16.994072 25.08658 ## 24 TAG9 1month TAG 16.975252 25.00099 ## 25 TAG10 1month TAG 17.026830 24.91397 ## 26 WT6 1month WT 17.087154 25.04936 ## 27 WT7 1month WT 16.987251 24.93077 ## 28 WT8 1month WT 17.049613 25.06133 ## 29 WT9 1month WT 17.021180 25.04082 ## 30 WT10 1month WT 16.962811 25.00125 ## 31 KO11 3months KO 13.986881 25.02644 ## 32 KO12 3months KO 13.967421 24.99782 ## 33 KO13 3months KO 14.046343 24.99654 ## 34 KO14 3months KO 13.961176 24.92098 ## 35 KO15 3months KO 14.101149 24.94335 ## 36 TAG11 3months TAG 10.080229 24.98040 ## 37 TAG12 3months TAG 10.070111 25.01959 ## 38 TAG13 3months TAG 9.929542 25.10609 ## 39 TAG14 3months TAG 10.000291 25.03049 ## 40 TAG15 3months TAG 10.010553 25.02233 ## 41 WT11 3months WT 10.009053 25.01467 ## 42 WT12 3months WT 10.006346 24.89659 ## 43 WT13 3months WT 10.010740 24.98888 ## 44 WT14 3months WT 9.954879 24.93684 ## 45 WT15 3months WT 10.008548 24.99566 ## delta_Ct delta_deltaCt ## 1 -0.11140794 2.884635168 ## 2 0.11917562 3.115218732 ## 3 -0.09767592 2.898367187 ## 4 -0.14584676 2.850196350 ## 5 -0.04715955 2.948883559 ## 6 -3.06094678 -0.064903672 ## 7 -3.05888111 -0.062838003 ## 8 -2.94322889 0.052814223 ## 9 -2.93462371 0.061419402 ## 10 -3.12218280 -0.126139687 ## 11 -3.04311571 -0.047072603 ## 12 -2.97373064 0.022312470 ## 13 -2.92869940 0.067343713 ## 14 -2.98736122 0.008681895 ## 15 -3.04730859 -0.051265476 ## 16 -4.94054030 -1.944497188 ## 17 -5.00138798 -2.005344866 ## 18 -4.92746102 -1.931417904 ## 19 -4.94491412 -1.948871013 ## 20 -5.09022981 -2.094186694 ## 21 -7.95394331 -4.957900197 ## 22 -8.02060148 -5.024558367 ## 23 -8.09250906 -5.096465950 ## 24 -8.02573996 -5.029696845 ## 25 -7.88713645 -4.891093335 ## 26 -7.96220205 -4.966158936 ## 27 -7.94351666 -4.947473553 ## 28 -8.01171251 -5.015669396 ## 29 -8.01964385 -5.023600740 ## 30 -8.03844168 -5.042398570 ## 31 -11.03956221 -8.043519095 ## 32 -11.03039419 -8.034351081 ## 33 -10.95019911 -7.954156002 ## 34 -10.95980324 -7.963760132 ## 35 -10.84220450 -7.846161386 ## 36 -14.90016995 -11.904126839 ## 37 -14.94947471 -11.953431595 ## 38 -15.17654394 -12.180500832 ## 39 -15.03020237 -12.034159260 ## 40 -15.01177859 -12.015735481 ## 41 -15.00561901 -12.009575893 ## 42 -14.89024656 -11.894203444 ## 43 -14.97814222 -11.982099108 ## 44 -14.98196314 -11.985920024 ## 45 -14.98711323 -11.991070115 Let’s find out fold change. The formula for this is: \\(2^{-ΔΔCt}\\) data$fold_gene_expression &lt;- 2^-(data$delta_deltaCt) data ## sampleID age line Ct_geneB1 Ct_Hk ## 1 KO1 15days KO 24.921546 25.03295 ## 2 KO2 15days KO 25.033395 24.91422 ## 3 KO3 15days KO 24.919002 25.01668 ## 4 KO4 15days KO 24.944535 25.09038 ## 5 KO5 15days KO 24.967481 25.01464 ## 6 TAG1 15days TAG 21.982319 25.04327 ## 7 TAG2 15days TAG 21.988629 25.04751 ## 8 TAG3 15days TAG 21.991452 24.93468 ## 9 TAG4 15days TAG 21.987716 24.92234 ## 10 TAG5 15days TAG 21.958236 25.08042 ## 11 WT1 15days WT 21.939837 24.98295 ## 12 WT2 15days WT 21.970565 24.94430 ## 13 WT3 15days WT 22.083091 25.01179 ## 14 WT4 15days WT 21.918357 24.90572 ## 15 WT5 15days WT 21.991263 25.03857 ## 16 KO6 1month KO 20.013602 24.95414 ## 17 KO7 1month KO 20.018077 25.01946 ## 18 KO8 1month KO 20.013163 24.94062 ## 19 KO9 1month KO 20.024997 24.96991 ## 20 KO10 1month KO 19.928039 25.01827 ## 21 TAG6 1month TAG 17.021118 24.97506 ## 22 TAG7 1month TAG 17.039490 25.06009 ## 23 TAG8 1month TAG 16.994072 25.08658 ## 24 TAG9 1month TAG 16.975252 25.00099 ## 25 TAG10 1month TAG 17.026830 24.91397 ## 26 WT6 1month WT 17.087154 25.04936 ## 27 WT7 1month WT 16.987251 24.93077 ## 28 WT8 1month WT 17.049613 25.06133 ## 29 WT9 1month WT 17.021180 25.04082 ## 30 WT10 1month WT 16.962811 25.00125 ## 31 KO11 3months KO 13.986881 25.02644 ## 32 KO12 3months KO 13.967421 24.99782 ## 33 KO13 3months KO 14.046343 24.99654 ## 34 KO14 3months KO 13.961176 24.92098 ## 35 KO15 3months KO 14.101149 24.94335 ## 36 TAG11 3months TAG 10.080229 24.98040 ## 37 TAG12 3months TAG 10.070111 25.01959 ## 38 TAG13 3months TAG 9.929542 25.10609 ## 39 TAG14 3months TAG 10.000291 25.03049 ## 40 TAG15 3months TAG 10.010553 25.02233 ## 41 WT11 3months WT 10.009053 25.01467 ## 42 WT12 3months WT 10.006346 24.89659 ## 43 WT13 3months WT 10.010740 24.98888 ## 44 WT14 3months WT 9.954879 24.93684 ## 45 WT15 3months WT 10.008548 24.99566 ## delta_Ct delta_deltaCt fold_gene_expression ## 1 -0.11140794 2.884635168 0.1354061 ## 2 0.11917562 3.115218732 0.1154053 ## 3 -0.09767592 2.898367187 0.1341234 ## 4 -0.14584676 2.850196350 0.1386773 ## 5 -0.04715955 2.948883559 0.1295083 ## 6 -3.06094678 -0.064903672 1.0460151 ## 7 -3.05888111 -0.062838003 1.0445185 ## 8 -2.94322889 0.052814223 0.9640539 ## 9 -2.93462371 0.061419402 0.9583208 ## 10 -3.12218280 -0.126139687 1.0913695 ## 11 -3.04311571 -0.047072603 1.0331664 ## 12 -2.97373064 0.022312470 0.9846532 ## 13 -2.92869940 0.067343713 0.9543936 ## 14 -2.98736122 0.008681895 0.9940002 ## 15 -3.04730859 -0.051265476 1.0361734 ## 16 -4.94054030 -1.944497188 3.8490361 ## 17 -5.00138798 -2.005344866 4.0148466 ## 18 -4.92746102 -1.931417904 3.8142989 ## 19 -4.94491412 -1.948871013 3.8607229 ## 20 -5.09022981 -2.094186694 4.2698539 ## 21 -7.95394331 -4.957900197 31.0796897 ## 22 -8.02060148 -5.024558367 32.5493847 ## 23 -8.09250906 -5.096465950 34.2128397 ## 24 -8.02573996 -5.029696845 32.6655233 ## 25 -7.88713645 -4.891093335 29.6732971 ## 26 -7.96220205 -4.966158936 31.2581163 ## 27 -7.94351666 -4.947473553 30.8558804 ## 28 -8.01171251 -5.015669396 32.3494526 ## 29 -8.01964385 -5.023600740 32.5277864 ## 30 -8.03844168 -5.042398570 32.9543856 ## 31 -11.03956221 -8.043519095 263.8399272 ## 32 -11.03039419 -8.034351081 262.1685977 ## 33 -10.95019911 -7.954156002 247.9930710 ## 34 -10.95980324 -7.963760132 249.6494870 ## 35 -10.84220450 -7.846161386 230.1070517 ## 36 -14.90016995 -11.904126839 3832.6507915 ## 37 -14.94947471 -11.953431595 3965.8972776 ## 38 -15.17654394 -12.180500832 4641.9035535 ## 39 -15.03020237 -12.034159260 4194.1398730 ## 40 -15.01177859 -12.015735481 4140.9196123 ## 41 -15.00561901 -12.009575893 4123.2776422 ## 42 -14.89024656 -11.894203444 3806.3788475 ## 43 -14.97814222 -11.982099108 4045.4910291 ## 44 -14.98196314 -11.985920024 4056.2195405 ## 45 -14.98711323 -11.991070115 4070.7251911 So here, we can see that 15-days-old WT samples have fold change of ~1. Because their Ct values were our calibrator/reference Ct values. Compared to them, 15-days-old TAG samples also have fold change of ~1, which is very reasonable, because we had similar values for the TAG as well. 15-days-old KO samples have less expression (~0.13 fold only). But in 1-month-old group, KO samples have fold change of ~4 and TAG/WT samples have fold-change of ~32. So, much higher than the reference group. Also, in 3-month-old group, KO samples have fold change of ~250 and WT/TAG samples have fold change of &gt;4020. So, same pattern (i.e. less in KO and high in WT/TAG) is observed for every line. And age has an effect in the expression of the gene. Interpreting the fold change Have a close look at your fold change column for each line and age group. To do any statistical analysis, we have to check how the fold change values are distributed. If they are not normally distributed, it is better to log transform them. par(mfrow = c(1,1)) hist(data$fold_gene_expression, xlab=&quot;fold change&quot;, main=&quot;Histogram of fold change&quot;) Figure 3.1: Histogram of fold change. data$log_fold_change &lt;- log2(data$fold_gene_expression) par(mfrow = c(1,1)) hist(data$log_fold_change, xlab=&quot;log fold change&quot;, main=&quot;Histogram of log fold change&quot;) Figure 3.2: Histogram of log fold change. We can put the same plots together and compare the fold change before and after log transformation. par(mfrow = c(1,2)) hist(data$fold_gene_expression, xlab=&quot;fold change&quot;, main=&quot;Histogram of fold change&quot;) hist(data$log_fold_change, xlab=&quot;log fold change&quot;, main=&quot;Histogram of log fold change&quot;) (#fig:fold_log-fold-together)Histogram of fold change and log fold change together. Our data preparation for one gene of interest and one housekeeping gene is done. Hurray……! Let’s save the data set. The code below will save the data set in your working directory. You can change the name as you wish by replacing pcr1.csv to the name you want. write.csv(data, &quot;pcr1.csv&quot;) You can work on this data set directly without running the above code if you wnat to do so. In that case, download the data set and read it by naming data (by running data = read.table(\"pcr1.csv\", header = TRUE, sep=\",\"). So, all the downstream analysis will be the same. 3.3 Statistical analysis Let’s have a look at the experiment design. table(data$age, data$line) ## ## KO TAG WT ## 15days 5 5 5 ## 1month 5 5 5 ## 3months 5 5 5 So, it was a balanced design. Let’s have a look at the log fold change for each age and line combination. boxplot(log_fold_change ~ line*age, data=data, xlab = &quot;Age-Line combinations&quot;, ylab = &quot;Log fold change&quot;, main=&quot;Boxplot of log fold change&quot;) Figure 3.3: Boxplot of log fold change for all age-line combinations. The plot shows that WT and TAG in a particular age group have similar expression of transcript B1. Let’s make a column combining age and line together. data$age_line &lt;- paste(data$age, data$line, sep = &quot;_&quot;) Let’s apply linear model for fold change against age_line column. lm1 &lt;- lm(log_fold_change ~ age_line, data=data) summary(lm1) ## ## Call: ## lm(formula = log_fold_change ~ age_line, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.17576 -0.04204 0.01335 0.04109 0.16291 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) -2.93946 0.03387 -86.79 ## age_line15days_TAG 2.96739 0.04790 61.95 ## age_line15days_WT 2.93946 0.04790 61.37 ## age_line1month_KO 4.92432 0.04790 102.81 ## age_line1month_TAG 7.93940 0.04790 165.75 ## age_line1month_WT 7.93852 0.04790 165.73 ## age_line3months_KO 10.90785 0.04790 227.72 ## age_line3months_TAG 14.95705 0.04790 312.26 ## age_line3months_WT 14.91203 0.04790 311.32 ## Pr(&gt;|t|) ## (Intercept) &lt;2e-16 *** ## age_line15days_TAG &lt;2e-16 *** ## age_line15days_WT &lt;2e-16 *** ## age_line1month_KO &lt;2e-16 *** ## age_line1month_TAG &lt;2e-16 *** ## age_line1month_WT &lt;2e-16 *** ## age_line3months_KO &lt;2e-16 *** ## age_line3months_TAG &lt;2e-16 *** ## age_line3months_WT &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.07574 on 36 degrees of freedom ## Multiple R-squared: 0.9998, Adjusted R-squared: 0.9998 ## F-statistic: 2.471e+04 on 8 and 36 DF, p-value: &lt; 2.2e-16 Interpreting the output: R takes the first group as reference by default. So, the comparison is against 15days_KO, that’s why it is not shown in the comparison. It is actually shown in terms of intercept. The value of intercept is an estimate of 15days_KO (You can have a look at the average of 15days_KO), which is significant here in this analysis. Here, every group is significantly different than the 15days_KO group. Have a closer look at your fold change or log fold change columns. Also notice the adjusted R-squared value and overall p-value in the output. Almost 100% variability in the data is captured by our model. It is because we simulated the data this way, there wasn’t that much variability. Tips: t value = Estimate/std. Error. The t value measures the size of the difference relative to the variation in the sample data (look at the equation). The greater the magnitude of t value, the greater the evidence against the null hypothesis meaning there is greater evidence that there is a significant difference. t value closer to 0 means more likely there isn’t a significant difference. N.B. you can check the estimate, standard error and t value manually for the reference (15days_KO) group. estimate &lt;- mean(data$log_fold_change[data$age_line == &quot;15days_KO&quot;]) se &lt;- function(x) sqrt(var(x) / length(x)) SE &lt;- se(data$log_fold_change[data$age_line == &quot;15days_KO&quot;]) #`SE` might be a bit different than the value shown in the output table t_value &lt;- estimate/SE But we set 15days_WT as our calibrator/reference group while calculating the ΔCt value. So, let’s set 15days_WT group as our reference. We should relevel the age_line column as factor for modeling. data$age_line &lt;- relevel(factor(data$age_line), ref = &quot;15days_WT&quot;) lm2 &lt;- lm(log_fold_change ~ age_line, data=data) summary(lm2) ## ## Call: ## lm(formula = log_fold_change ~ age_line, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.17576 -0.04204 0.01335 0.04109 0.16291 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) -1.324e-15 3.387e-02 0.000 ## age_line15days_KO -2.939e+00 4.790e-02 -61.367 ## age_line15days_TAG 2.793e-02 4.790e-02 0.583 ## age_line1month_KO 1.985e+00 4.790e-02 41.438 ## age_line1month_TAG 5.000e+00 4.790e-02 104.384 ## age_line1month_WT 4.999e+00 4.790e-02 104.365 ## age_line3months_KO 7.968e+00 4.790e-02 166.356 ## age_line3months_TAG 1.202e+01 4.790e-02 250.891 ## age_line3months_WT 1.197e+01 4.790e-02 249.951 ## Pr(&gt;|t|) ## (Intercept) 1.000 ## age_line15days_KO &lt;2e-16 *** ## age_line15days_TAG 0.563 ## age_line1month_KO &lt;2e-16 *** ## age_line1month_TAG &lt;2e-16 *** ## age_line1month_WT &lt;2e-16 *** ## age_line3months_KO &lt;2e-16 *** ## age_line3months_TAG &lt;2e-16 *** ## age_line3months_WT &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.07574 on 36 degrees of freedom ## Multiple R-squared: 0.9998, Adjusted R-squared: 0.9998 ## F-statistic: 2.471e+04 on 8 and 36 DF, p-value: &lt; 2.2e-16 Interpreting the output This time, the comparison is relative to 15days_WT, (and not shown in the comparison). Here every group is significantly different than the 15days_WT group except 15days_TAG. And you might have recall why this is the case–we simulated this way, all the WT and TAG samples have basically similar Ct values (or fold change or log fold change). See the boxplot as well. Have a closer look at the values for WT and TAG in the output columns to verify the claim. Also notice the adjusted R-squared value and overall p-value again. We can check pair-wise comparisons. It will show all possible combination of pair-wise comparisons. library(emmeans) em=emmeans(lm2,~age_line) emp=emmeans(lm2,pairwise~age_line) em ## age_line emmean SE df lower.CL upper.CL ## 15days_WT 0.0000 0.0339 36 -0.0687 0.0687 ## 15days_KO -2.9395 0.0339 36 -3.0082 -2.8708 ## 15days_TAG 0.0279 0.0339 36 -0.0408 0.0966 ## 1month_KO 1.9849 0.0339 36 1.9162 2.0536 ## 1month_TAG 4.9999 0.0339 36 4.9313 5.0686 ## 1month_WT 4.9991 0.0339 36 4.9304 5.0678 ## 3months_KO 7.9684 0.0339 36 7.8997 8.0371 ## 3months_TAG 12.0176 0.0339 36 11.9489 12.0863 ## 3months_WT 11.9726 0.0339 36 11.9039 12.0413 ## ## Confidence level used: 0.95 emp ## $emmeans ## age_line emmean SE df lower.CL upper.CL ## 15days_WT 0.0000 0.0339 36 -0.0687 0.0687 ## 15days_KO -2.9395 0.0339 36 -3.0082 -2.8708 ## 15days_TAG 0.0279 0.0339 36 -0.0408 0.0966 ## 1month_KO 1.9849 0.0339 36 1.9162 2.0536 ## 1month_TAG 4.9999 0.0339 36 4.9313 5.0686 ## 1month_WT 4.9991 0.0339 36 4.9304 5.0678 ## 3months_KO 7.9684 0.0339 36 7.8997 8.0371 ## 3months_TAG 12.0176 0.0339 36 11.9489 12.0863 ## 3months_WT 11.9726 0.0339 36 11.9039 12.0413 ## ## Confidence level used: 0.95 ## ## $contrasts ## contrast estimate SE df ## 15days_WT - 15days_KO 2.94e+00 0.0479 36 ## 15days_WT - 15days_TAG -2.79e-02 0.0479 36 ## 15days_WT - 1month_KO -1.98e+00 0.0479 36 ## 15days_WT - 1month_TAG -5.00e+00 0.0479 36 ## 15days_WT - 1month_WT -5.00e+00 0.0479 36 ## 15days_WT - 3months_KO -7.97e+00 0.0479 36 ## 15days_WT - 3months_TAG -1.20e+01 0.0479 36 ## 15days_WT - 3months_WT -1.20e+01 0.0479 36 ## 15days_KO - 15days_TAG -2.97e+00 0.0479 36 ## 15days_KO - 1month_KO -4.92e+00 0.0479 36 ## 15days_KO - 1month_TAG -7.94e+00 0.0479 36 ## 15days_KO - 1month_WT -7.94e+00 0.0479 36 ## 15days_KO - 3months_KO -1.09e+01 0.0479 36 ## 15days_KO - 3months_TAG -1.50e+01 0.0479 36 ## 15days_KO - 3months_WT -1.49e+01 0.0479 36 ## 15days_TAG - 1month_KO -1.96e+00 0.0479 36 ## 15days_TAG - 1month_TAG -4.97e+00 0.0479 36 ## 15days_TAG - 1month_WT -4.97e+00 0.0479 36 ## 15days_TAG - 3months_KO -7.94e+00 0.0479 36 ## 15days_TAG - 3months_TAG -1.20e+01 0.0479 36 ## 15days_TAG - 3months_WT -1.19e+01 0.0479 36 ## 1month_KO - 1month_TAG -3.02e+00 0.0479 36 ## 1month_KO - 1month_WT -3.01e+00 0.0479 36 ## 1month_KO - 3months_KO -5.98e+00 0.0479 36 ## 1month_KO - 3months_TAG -1.00e+01 0.0479 36 ## 1month_KO - 3months_WT -9.99e+00 0.0479 36 ## 1month_TAG - 1month_WT 8.83e-04 0.0479 36 ## 1month_TAG - 3months_KO -2.97e+00 0.0479 36 ## 1month_TAG - 3months_TAG -7.02e+00 0.0479 36 ## 1month_TAG - 3months_WT -6.97e+00 0.0479 36 ## 1month_WT - 3months_KO -2.97e+00 0.0479 36 ## 1month_WT - 3months_TAG -7.02e+00 0.0479 36 ## 1month_WT - 3months_WT -6.97e+00 0.0479 36 ## 3months_KO - 3months_TAG -4.05e+00 0.0479 36 ## 3months_KO - 3months_WT -4.00e+00 0.0479 36 ## 3months_TAG - 3months_WT 4.50e-02 0.0479 36 ## t.ratio p.value ## 61.367 &lt;.0001 ## -0.583 0.9996 ## -41.438 &lt;.0001 ## -104.384 &lt;.0001 ## -104.365 &lt;.0001 ## -166.356 &lt;.0001 ## -250.891 &lt;.0001 ## -249.951 &lt;.0001 ## -61.950 &lt;.0001 ## -102.805 &lt;.0001 ## -165.751 &lt;.0001 ## -165.732 &lt;.0001 ## -227.723 &lt;.0001 ## -312.258 &lt;.0001 ## -311.318 &lt;.0001 ## -40.855 &lt;.0001 ## -103.801 &lt;.0001 ## -103.782 &lt;.0001 ## -165.773 &lt;.0001 ## -250.308 &lt;.0001 ## -249.368 &lt;.0001 ## -62.946 &lt;.0001 ## -62.927 &lt;.0001 ## -124.918 &lt;.0001 ## -209.453 &lt;.0001 ## -208.513 &lt;.0001 ## 0.018 1.0000 ## -61.972 &lt;.0001 ## -146.507 &lt;.0001 ## -145.568 &lt;.0001 ## -61.991 &lt;.0001 ## -146.526 &lt;.0001 ## -145.586 &lt;.0001 ## -84.535 &lt;.0001 ## -83.595 &lt;.0001 ## 0.940 0.9888 ## ## P value adjustment: tukey method for comparing a family of 9 estimates Let’s have a look from the plotting. plot(em, comparisons = TRUE, ylab = &quot;age-line combination&quot;) Figure 3.4: Comparing all age-line combination Have a look at every combination of WT and TAG with age? How are they? Aren’t they same as we expected? What if we model for age and line separately? lm3 &lt;- lm(log_fold_change ~ age + line, data=data) summary(lm3) ## ## Call: ## lm(formula = log_fold_change ~ age + line, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.58563 -0.14537 -0.05045 0.23178 0.40482 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -3.19157 0.08549 -37.33 &lt;2e-16 ## age1month 4.96513 0.09365 53.02 &lt;2e-16 ## age3months 11.62336 0.09365 124.11 &lt;2e-16 ## lineTAG 3.34389 0.09365 35.71 &lt;2e-16 ## lineWT 3.31928 0.09365 35.44 &lt;2e-16 ## ## (Intercept) *** ## age1month *** ## age3months *** ## lineTAG *** ## lineWT *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2565 on 40 degrees of freedom ## Multiple R-squared: 0.9977, Adjusted R-squared: 0.9974 ## F-statistic: 4300 on 4 and 40 DF, p-value: &lt; 2.2e-16 It shows everything very well. But we didn’t wanted the comparison/interpretation in this way. It takes all the lines to show things for a age group and all the age groups for a particular line. What if we model for interaction of age and line? lm4 &lt;- lm(log_fold_change ~ age*line, data=data) summary(lm4) ## ## Call: ## lm(formula = log_fold_change ~ age * line, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.17576 -0.04204 0.01335 0.04109 0.16291 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) -2.93946 0.03387 -86.786 ## age1month 4.92432 0.04790 102.805 ## age3months 10.90785 0.04790 227.723 ## lineTAG 2.96739 0.04790 61.950 ## lineWT 2.93946 0.04790 61.367 ## age1month:lineTAG 0.04769 0.06774 0.704 ## age3months:lineTAG 1.08181 0.06774 15.970 ## age1month:lineWT 0.07474 0.06774 1.103 ## age3months:lineWT 1.06472 0.06774 15.718 ## Pr(&gt;|t|) ## (Intercept) &lt;2e-16 *** ## age1month &lt;2e-16 *** ## age3months &lt;2e-16 *** ## lineTAG &lt;2e-16 *** ## lineWT &lt;2e-16 *** ## age1month:lineTAG 0.486 ## age3months:lineTAG &lt;2e-16 *** ## age1month:lineWT 0.277 ## age3months:lineWT &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.07574 on 36 degrees of freedom ## Multiple R-squared: 0.9998, Adjusted R-squared: 0.9998 ## F-statistic: 2.471e+04 on 8 and 36 DF, p-value: &lt; 2.2e-16 14days old and KO are not shown again. Because R took them as reference, by default. Our lm2 is better to compare everything. The above code is equivalent to lm(log_fold_change ~ age + line + age*line, data=data). We used the short convention here. The intercept here is the mean of 15-days-old KO mice samples. Check it by mean(data$log_fold_change[data$age == \"15days\" &amp; data$line == \"KO\"]). All other results are relative to this group (not shown in the output). You can try lm(log_fold_change ~ -1 + age*line, data=data) command as well to see what happens. How is our model? Let’s check. anova(lm2) ## Analysis of Variance Table ## ## Response: log_fold_change ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## age_line 8 1133.86 141.732 24710 &lt; 2.2e-16 *** ## Residuals 36 0.21 0.006 ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The F value is too high. The “F value” of the ANOVA table represents the value of F-statistic \\(\\frac{SSR/1}{SSE/(n-1)}\\), where SSR = variation explained by the regression (fitted or model) line and SSE = variation around the conditional mean. The null hypothesis here is no linear dependence of log-fold-change on age_line. The ANOVA table shows that the null hypothesis is not true, so log_fold_change depends on age_line (have a look at the p value). So, our model is very good. We could use lme4 or limma packages for the modeling as well. But lm() function from base R is good enough to do this simple modeling. We will see their use later. Next part of this endeavor will be simulation and analysis of RT-qPCR data with multiple genes of interest/transcripts and multiple reference/housekeeping genes. Stay tuned! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
